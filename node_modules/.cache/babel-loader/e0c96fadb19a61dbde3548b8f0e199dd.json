{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\PFINALF3\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(undefined);\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [dentistList, setDentistList] = useState;\n  const url = 'https://jsonplaceholder.typicode.com/users';\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(data => setDentistList(data.result));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      dentistList,\n      setDentistList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","initialState","theme","data","ContextGlobal","undefined","ContextProvider","children","dentistList","setDentistList","url","fetch","then","res","json","result"],"sources":["C:/Users/User/Desktop/PFINALF3/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useEffect, useState } from \"react\";\r\n\r\nexport const initialState = {theme: \"\", data: []}\r\n\r\nexport const ContextGlobal = createContext(undefined);\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n\r\n  const [dentistList, setDentistList] = useState\r\n  const url= 'https://jsonplaceholder.typicode.com/users'\r\n  \r\n  useEffect(() => {\r\n      fetch(url)\r\n      .then(res => res.json())\r\n      .then(data => setDentistList(data.result))\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{dentistList, setDentistList}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAACC,KAAK,EAAE,EAAR;EAAYC,IAAI,EAAE;AAAlB,CAArB;AAEP,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAACO,SAAD,CAAnC;AAEP,OAAO,MAAMC,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EAEA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAtC;EACA,MAAMU,GAAG,GAAE,4CAAX;EAEAX,SAAS,CAAC,MAAM;IACZY,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMT,IAAI,IAAIM,cAAc,CAACN,IAAI,CAACY,MAAN,CAF5B;EAGH,CAJQ,EAIN,EAJM,CAAT;EAOA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACP,WAAD;MAAcC;IAAd,CAA/B;IAAA,UACGF;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAlBM;;GAAMD,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}