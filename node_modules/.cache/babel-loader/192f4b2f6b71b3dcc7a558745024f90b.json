{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\PFINALF3\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(undefined);\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const initialApiState = [];\n\n  const apiReducer = (state, action) => {\n    switch (action.type) {\n      case 'GET_USER':\n        return action.payload;\n\n      default:\n        trhq;\n    }\n  };\n\n  const [apiState, apiDispatch] = useReducer(apiReducer, initialApiState);\n  const url = 'https://jsonplaceholder.typicode.com/users';\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(data => apiDispatch({\n      type: 'GET_USER',\n      payload: data.results\n    }));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      apiState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"rXkSgcDUVIZKf2TXDD6yRm6ECSw=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useReducer","initialState","theme","data","ContextGlobal","undefined","ContextProvider","children","initialApiState","apiReducer","state","action","type","payload","trhq","apiState","apiDispatch","url","fetch","then","res","json","results"],"sources":["C:/Users/User/Desktop/PFINALF3/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useEffect, useReducer } from \"react\";\r\n\r\nexport const initialState = {theme: \"\", data: []}\r\n\r\nexport const ContextGlobal = createContext(undefined);\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n  const initialApiState = []\r\n  \r\n  const apiReducer = (state, action) => {\r\n    switch(action.type){\r\n      case 'GET_USER':\r\n        return action.payload\r\n      default:\r\n        trhq\r\n    }\r\n  }\r\n\r\n\r\nconst [apiState, apiDispatch] =useReducer(apiReducer, initialApiState)\r\nconst url = 'https://jsonplaceholder.typicode.com/users'\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n    .then(res => res.json())\r\n    .then(data => apiDispatch({type: 'GET_USER', payload: data.results})) \r\n  }, [])\r\n\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{apiState}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,UAAnC,QAAqD,OAArD;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAACC,KAAK,EAAE,EAAR;EAAYC,IAAI,EAAE;AAAlB,CAArB;AAEP,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAACO,SAAD,CAAnC;AAEP,OAAO,MAAMC,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EACA,MAAMC,eAAe,GAAG,EAAxB;;EAEA,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;IACpC,QAAOA,MAAM,CAACC,IAAd;MACE,KAAK,UAAL;QACE,OAAOD,MAAM,CAACE,OAAd;;MACF;QACEC,IAAI;IAJR;EAMD,CAPD;;EAUF,MAAM,CAACC,QAAD,EAAWC,WAAX,IAAyBhB,UAAU,CAACS,UAAD,EAAaD,eAAb,CAAzC;EACA,MAAMS,GAAG,GAAG,4CAAZ;EAEElB,SAAS,CAAC,MAAM;IACdmB,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMhB,IAAI,IAAIa,WAAW,CAAC;MAACJ,IAAI,EAAE,UAAP;MAAmBC,OAAO,EAAEV,IAAI,CAACmB;IAAjC,CAAD,CAFzB;EAGD,CAJQ,EAIN,EAJM,CAAT;EAOA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACP;IAAD,CAA/B;IAAA,UACGR;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA7BM;;GAAMD,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}